#lang plai

; (1) Solve by myself: ...
; (2) Time taken: ...

; type definition for abstract syntax tree of RBMFAE
(define-type RBMFAE
    [num    (n number?)]
    [add     (lhs RBMFAE?) (rhs RBMFAE?)]
    [sub     (lhs RBMFAE?) (rhs RBMFAE?)]
    [id      (name symbol?)]
    [fun      (param symbol?) (body RBMFAE?)]
    [refun      (param symbol?) (body RBMFAE?)]
    [setvar     (name symbol?) (v RBMFAE?)]
    [newbox  (v RBMFAE?)]
    [setbox  (bn RBMFAE?) (v RBMFAE?)]
    [openbox  (v RBMFAE?)]
    [seqn  (ex1 RBMFAE?) (ex2 RBMFAE?)]
    [app     (ftn RBMFAE?) (arg RBMFAE?)]
  )
  
        
; parse : sexp -> RBMFAE
; (3) purpose: ...
(define (parse sexp)
   (match sexp
        [(? number?)                (num sexp)]
        [(list '+ l r)              (add (parse l) (parse r))]
        [(list '- l r)              (sub (parse l) (parse r))]
        [(list 'with (list i v) e)  (app (fun i (parse e)) (parse v))]
        [(? symbol?)                (id sexp)]
        [(list 'newbox v)           (newbox (parse v))]
        [(list 'setbox i v)         (setbox (parse i) (parse v))]
        [(list 'openbox i)          (openbox (parse i))]
        [(list 'seqn ex1 ex2)       (seqn (parse ex1) (parse ex2))]
        [(list 'fun (list p) b)     (fun p (parse b))]
        [(list 'refun (list p) b)   (refun p (parse b))]
        [(list f a)                 (app (parse f) (parse a))]
        [(list 'setvar n v)            (setvar n (parse v))]
        [else                       (error 'parse "bad syntax: ~a" sexp)]))


(define-type RBMFAE-Value
  [numV      (n number?)]
  [closureV  (param symbol?) (body RBMFAE?) (ds DefrdSub?)]
  [refclosV  (param symbol?) (body RBMFAE?) (ds DefrdSub?)]
  [boxV      (address integer?)])

; (4) num-op: ...
; (5) purpose: ...
(define (num-op op)
     (lambda (x y)
          (numV (op (numV-n x) (numV-n y)))))

(define num+ (num-op +))
(define num- (num-op -))


(define-type DefrdSub
  [mtSub]
  [aSub (name symbol?) (address integer?) (ds DefrdSub?)])

(define-type Store
  [mtSto]
  [aSto   (address integer?) (value RBMFAE-Value?)
          (rest Store?)])

(define-type Value*Store
  [v*s (value RBMFAE-Value?) (store Store?)])

; lookup: symbol DefrdSub -> address
; (6) purpose: ...
(define (lookup name ds)
  (type-case DefrdSub ds
    [mtSub ()           (error 'lookup "free identifier")]
    [aSub  (i adr saved) (if(symbol=? i name)
                                adr
                                (lookup name saved))]))

; (7) store-lookup: ...
; (8) purpose: ...
(define (store-lookup address sto)
  (type-case Store sto
    [mtSto ()           (error 'store-lookup "No value at address")]
    [aSto  (location value rest-store)
                 (if(= location address)
                     value
                    (store-lookup address rest-store))]))

; malloc: Store -> Integer
; (9) purpose: ...
(define (malloc st)
  (+ 1 (max-address st)))

; (10) max-address: ...
; (11) purpose: ...
(define (max-address st)
  (type-case Store st
    [mtSto () 0]
    [aSto (n v st)
          (max n (max-address st))]))

; (12) interp: 
; (13) purpose: ...
(define (interp rbmfae ds st)
  (type-case RBMFAE rbmfae
    [num    (n)    (v*s (numV n) st)]
    [add    (l r)  (interp-two l r ds st (lambda (v1 v2 st1) (v*s (num+ v1 v2) st1)))]
    [sub    (l r)  (interp-two l r ds st (lambda (v1 v2 st1) (v*s (num- v1 v2) st1)))]
    [id     (s)    (v*s (store-lookup (lookup s ds) st) st)]
    [fun    (p b)  (v*s (closureV p b ds) st)]
    [refun    (p b)  (v*s (refclosV p b ds) st)]
    [app (f a)     (type-case Value*Store (interp f ds st)
                        [v*s (f-value f-store)
                          (type-case RBMFAE-Value f-value
                            [closureV (c-param c-body c-ds)
                                 ;; Complete this section
                                      ]
                             [refclosV (rc-param rc-body rc-ds)
                                 ;; Complete this section
                                      ]
                             [else (error interp "trying to apply a number")])])]
    [newbox (val)    (type-case Value*Store (interp val ds st)
                     [v*s (vl st1)
                                   (local [(define a (malloc st1))]
                                          (v*s (boxV a)
                                          (aSto a vl st1)))])]
    [setbox (bx-expr val-expr)
                   (interp-two bx-expr val-expr ds st
                               (lambda (bx-val val st1)
                                       (v*s val
                                       (aSto (boxV-address bx-val)
                                             val
                                             st1))))]
    [openbox (bx-expr)
                   (type-case Value*Store (interp bx-expr ds st)
                     [v*s (bx-val st1)
                                       (v*s (store-lookup (boxV-address bx-val)
                                                           st1)
                                             st1)])]
    [seqn (a b) (interp-two a b ds st (lambda (v1 v2 st1) (v*s v2 st1)))]
    [setvar (id val-expr) (local [(define a (lookup id ds))]
                           (type-case Value*Store (interp val-expr ds st)
                             [v*s (val st)
                                  (v*s val
                                       (aSto a val st))]))]
    ))

;interp-two: RBMFAE RBMFAE DefrdSub Store
;            (Value Value Store -> Value*Store)
;            -> Value*Store
; (14) purpose: 
(define (interp-two expr1 expr2 ds st handle)
  (type-case Value*Store (interp expr1 ds st)
    [v*s (val1 st2)
         [type-case Value*Store (interp expr2 ds st2)
           [v*s (val2 st3)
                (handle val1 val2 st3)]]]))


(define (run sexp ds st)
     (interp (parse sexp) ds st))

;; example test cases. We will use our own test cases for HW evaluation.
(test (run '{with {a 3} {setvar a 5}} (mtSub) (mtSto))
      (v*s (numV 5) (aSto 1 (numV 5) (aSto 1 (numV 3) (mtSto)))))

(test (run '{with {a 3} {seqn {{fun {x} {setvar x 5}} a} a}} (mtSub) (mtSto))
      (v*s (numV 3) (aSto 2 (numV 5) (aSto 2 (numV 3) (aSto 1 (numV 3) (mtSto))))))

(test (run '{with {swap {refun {x}
                       {refun {y}
                            {with {z x}
                                  {seqn {setvar x y}
                                        {setvar y z}}}}}}
            {with {a 10}
                  {with {b 20}
                        {seqn {{swap a} b}
                              b}}}} (mtSub) (mtSto))
      (v*s
 (numV 10)
 (aSto
  3
  (numV 10)
  (aSto
   2
   (numV 20)
   (aSto
    4
    (numV 10)
    (aSto
     3
     (numV 20)
     (aSto
      2
      (numV 10)
      (aSto
       1
       (refclosV
        'x
        (refun 'y (app (fun 'z (seqn (setvar 'x (id 'y)) (setvar 'y (id 'z)))) (id 'x)))
        (mtSub))
       (mtSto)))))))))
